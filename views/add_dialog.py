# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
sys.path.append("..")
from PyQt5 import QtCore, QtGui, QtWidgets
from models.model import Inwards, Outwards
from datetime import datetime
from controllers.controller import refresh_table, inwards_model, outwards_model, inventory_model
from utils.utils import only_digits


class MyEmitter(QtCore.QObject):
    # Define a custom signal with parameters
    my_signal = QtCore.pyqtSignal(str)

    def emit_signal(self):
        # Emit the custom signal with a message
        self.my_signal.emit("Hello from the custom signal!")


class Ui_dialog(object):
    def setupUi(self, dialog, tablename):

        dialog.setObjectName("dialog")
        dialog.resize(292, 287)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../assets/icons/add-square.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        dialog.setWindowIcon(icon)
        self.gridLayout = QtWidgets.QGridLayout(dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.group_box = QtWidgets.QGroupBox(dialog)
        self.group_box.setObjectName("group_box")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.group_box)
        self.verticalLayout.setObjectName("verticalLayout")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.part_label = QtWidgets.QLabel(self.group_box)
        self.part_label.setObjectName("part_label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.part_label)
        self.part_edit = QtWidgets.QLineEdit(self.group_box)
        self.part_edit.setClearButtonEnabled(True)
        self.part_edit.setObjectName("part_edit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.part_edit)
        self.quantity_label = QtWidgets.QLabel(self.group_box)
        self.quantity_label.setObjectName("quantity_label")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.quantity_label)
        self.quantity_edit = QtWidgets.QLineEdit(self.group_box)
        self.quantity_edit.setClearButtonEnabled(True)
        self.quantity_edit.setObjectName("quantity_edit")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.quantity_edit)
        self.invoice_label = QtWidgets.QLabel(self.group_box)
        self.invoice_label.setObjectName("invoice_label")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.invoice_label)
        self.invoice_edit = QtWidgets.QLineEdit(self.group_box)
        self.invoice_edit.setClearButtonEnabled(True)
        self.invoice_edit.setObjectName("invoice_edit")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.invoice_edit)
        self.description_label = QtWidgets.QLabel(self.group_box)
        self.description_label.setObjectName("description_l`abel")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.description_label)
        self.description_edit = QtWidgets.QLineEdit(self.group_box)
        self.description_edit.setClearButtonEnabled(True)
        self.description_edit.setObjectName("description_edit")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.description_edit)
        self.date_label = QtWidgets.QLabel(self.group_box)
        self.date_label.setObjectName("date_label")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.date_label)
        self.date_edit = QtWidgets.QDateEdit(self.group_box)
        todays_date: datetime.date = datetime.now().date()
        self.date_edit.setDate(QtCore.QDate(todays_date.year, todays_date.month, todays_date.day))
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setObjectName("date_edit")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.date_edit)
        self.verticalLayout.addLayout(self.formLayout)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.add_button = QtWidgets.QPushButton(self.group_box)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../assets/icons/add-ellipse.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.add_button.setIcon(icon1)
        self.add_button.setObjectName("add_button")
        self.horizontalLayout.addWidget(self.add_button)
        self.cancel_button = QtWidgets.QPushButton(self.group_box)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../assets/icons/close-ellipse.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cancel_button.setIcon(icon2)
        self.cancel_button.setFlat(False)
        self.cancel_button.setObjectName("cancel_button")
        self.horizontalLayout.addWidget(self.cancel_button)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout.addWidget(self.group_box, 0, 0, 1, 1)
        self.rack_label = QtWidgets.QLabel(self.group_box)
        self.rack_label.setObjectName("rack_label")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.rack_label)
        self.rack_edit = QtWidgets.QLineEdit(self.group_box)
        self.rack_edit.setObjectName("rack_edit")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.rack_edit)
        self.retranslateUi(dialog)
        match tablename:
            case "Inwards":
                self.add_button.clicked.connect(lambda: self.add_item(dialog))
            case "Outwards":
                self.add_button.clicked.connect(lambda: self.add_item_2(dialog))
        # type: ignore
        self.cancel_button.clicked.connect(dialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(dialog)

    def retranslateUi(self, dialog):
        _translate = QtCore.QCoreApplication.translate
        dialog.setWindowTitle(_translate("dialog", "Add Part"))
        self.group_box.setTitle(_translate("dialog", "Add Entry"))
        self.part_label.setText(_translate("dialog", "Part No."))
        self.quantity_label.setText(_translate("dialog", "Quantity"))
        self.invoice_label.setText(_translate("dialog", "Invoice No."))
        self.description_label.setText(_translate("dialog", "Description"))
        self.rack_label.setText(_translate("dialog", "Rack No."))
        self.date_label.setText(_translate("dialog", "Date"))
        self.add_button.setText(_translate("dialog", "Add Item"))
        self.cancel_button.setText(_translate("dialog", "Cancel"))

    def all_fields_filled(self):
        """Method which check all fields are not empty"""

        # When all fields are filled
        if not (self.part_edit.text()
            and self.quantity_edit.text()
            and self.invoice_edit.text()
            and self.description_edit.text()
        ):
            # Create a new alert message
            alert = QtWidgets.QMessageBox()
            # Add a title to the window
            alert.setWindowTitle("Invalid entry")
            # Add an icon to inform the user of his mistake
            alert.setIcon(QtWidgets.QMessageBox.Information)
            # Set the text displayed inside to show the following message
            alert.setText(f"Some field is empty.")
            # Add an 'OK' button for the user to click
            alert.setStandardButtons(QtWidgets.QMessageBox.Ok)
            # Launch the Alert
            alert.exec_()
            # Return False because some field was empty
            return False

        # Return True because all fields are indeed filled
        return True

    def add_item(self, dialog):
        """Method to add an entry in the database"""

        if (self.all_fields_filled()
            and only_digits(self.quantity_edit)
            and only_digits(self.invoice_edit)
        ):

            # Gather the data and insert into database table
            new_entry = Inwards()
            new_entry.part = self.part_edit.text()
            new_entry.description = self.description_edit.text()
            new_entry.quantity = int(self.quantity_edit.text())
            new_entry.invoice = int(self.invoice_edit.text())
            new_entry.rack = self.rack_edit.text()
            new_entry.date = self.date_edit.date().toString("dd-MM-yyyy")
            new_entry.add()

            dialog.accept()

        inwards_model.select()
        inventory_model.select()

    def add_item_2(self, dialog):
        """Method to add an entry in the database"""

        if (self.all_fields_filled()
                and only_digits(self.quantity_edit)
                and only_digits(self.invoice_edit)
        ):
            # Gather the data and insert into database table
            new_entry = Outwards()
            new_entry.part = self.part_edit.text()
            new_entry.description = self.description_edit.text()
            new_entry.quantity = int(self.quantity_edit.text())
            new_entry.invoice = int(self.invoice_edit.text())
            new_entry.rack = self.rack_edit.text()
            new_entry.date = self.date_edit.date().toString("dd-MM-yyyy")
            new_entry.add()

            dialog.accept()

        outwards_model.select()
        inventory_model.select()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    ui = Ui_dialog()
    ui.setupUi(dialog)
    dialog.show()
    sys.exit(app.exec_())
